
bin\Debug\h-brug_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000396  0000042a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000396  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  0000042a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000012  00000000  00000000  0000042d  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000078  00000000  00000000  00000480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00000d8c  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000c5c  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   0000043b  00000000  00000000  00001ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000094  00000000  00000000  0000231c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000531  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 000000f8  00000000  00000000  000028e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  68:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  6c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  70:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  7c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  80:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  84:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  88:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  8c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  90:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  94:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  98:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  9c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  a8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  ac:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  b8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  bc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  c8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  cc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  d8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  dc:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  e0:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	0e 94 11 01 	call	0x222	; 0x222 <main>
  f8:	0c 94 c9 01 	jmp	0x392	; 0x392 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000100 <init_h_brug>:
        PORTE &= ~(1 << motorL_2);
        PORTE &= ~(1 << motorR_1);
        PORTG |= (1 << motorR_2);
*/
void init_h_brug (void)
{
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62

00000108 <.Loc.1>:
    //timer PWM motoren
    TCCR4A = (1<<COM4A1) | (1<<COM4A0) | (1<<COM4B1) | (1<<COM4B0) | (1<<COM4C1) | (1<<COM4C0) | (1<<WGM41) | (0<<WGM40); //COM1xn is de PWM instelling voor de pins
 108:	80 ea       	ldi	r24, 0xA0	; 160
 10a:	90 e0       	ldi	r25, 0x00	; 0

0000010c <.Loc.2>:
 10c:	2e ef       	ldi	r18, 0xFE	; 254
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18

00000112 <.Loc.3>:
    TCCR4B = (1<<WGM43) | (1<<WGM42) | (0<<CS42) | (1<<CS41) | (0<<CS40); // CS1n is de prescaler 8 WGM1n is de PWM instelling voor timer 1 (fastPWM)
 112:	81 ea       	ldi	r24, 0xA1	; 161
 114:	90 e0       	ldi	r25, 0x00	; 0

00000116 <.Loc.4>:
 116:	2a e1       	ldi	r18, 0x1A	; 26
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18

0000011c <.Loc.5>:
    OCR4A = 0;
 11c:	88 ea       	ldi	r24, 0xA8	; 168
 11e:	90 e0       	ldi	r25, 0x00	; 0

00000120 <.Loc.6>:
 120:	fc 01       	movw	r30, r24
 122:	11 82       	std	Z+1, r1	; 0x01
 124:	10 82       	st	Z, r1

00000126 <.Loc.7>:
    OCR4B = 0;
 126:	8a ea       	ldi	r24, 0xAA	; 170
 128:	90 e0       	ldi	r25, 0x00	; 0

0000012a <.Loc.8>:
 12a:	fc 01       	movw	r30, r24
 12c:	11 82       	std	Z+1, r1	; 0x01
 12e:	10 82       	st	Z, r1

00000130 <.Loc.9>:
    ICR4 = 2000;
 130:	86 ea       	ldi	r24, 0xA6	; 166
 132:	90 e0       	ldi	r25, 0x00	; 0

00000134 <.Loc.10>:
 134:	20 ed       	ldi	r18, 0xD0	; 208
 136:	37 e0       	ldi	r19, 0x07	; 7
 138:	fc 01       	movw	r30, r24
 13a:	31 83       	std	Z+1, r19	; 0x01
 13c:	20 83       	st	Z, r18

0000013e <.Loc.11>:
}
 13e:	00 00       	nop
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <h_bridgeL>:
void h_bridgeL(int PercentKracht)
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	0f 92       	push	r0
 14c:	0f 92       	push	r0
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	9a 83       	std	Y+2, r25	; 0x02
 154:	89 83       	std	Y+1, r24	; 0x01

00000156 <.Loc.13>:
	if ((PercentKracht >= 0) && (PercentKracht <= 100))
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	9a 81       	ldd	r25, Y+2	; 0x02
 15a:	99 23       	and	r25, r25
 15c:	2c f1       	brlt	.+74     	; 0x1a8 <.L4>

0000015e <.Loc.14>:
 15e:	89 81       	ldd	r24, Y+1	; 0x01
 160:	9a 81       	ldd	r25, Y+2	; 0x02
 162:	84 36       	cpi	r24, 0x64	; 100
 164:	91 05       	cpc	r25, r1
 166:	09 f0       	breq	.+2      	; 0x16a <.Loc.15>

00000168 <L0^A>:
 168:	fc f4       	brge	.+62     	; 0x1a8 <.L4>

0000016a <.Loc.15>:
        {
            OCR4A = ((ICR4/100)*(PercentKracht));
 16a:	86 ea       	ldi	r24, 0xA6	; 166
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	fc 01       	movw	r30, r24
 170:	80 81       	ld	r24, Z
 172:	91 81       	ldd	r25, Z+1	; 0x01

00000174 <.Loc.16>:
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	96 95       	lsr	r25
 17a:	87 95       	ror	r24
 17c:	9c 01       	movw	r18, r24
 17e:	ab e7       	ldi	r26, 0x7B	; 123
 180:	b4 e1       	ldi	r27, 0x14	; 20
 182:	0e 94 ba 01 	call	0x374	; 0x374 <__umulhisi3>
 186:	bc 01       	movw	r22, r24
 188:	76 95       	lsr	r23
 18a:	67 95       	ror	r22

0000018c <.Loc.17>:
 18c:	49 81       	ldd	r20, Y+1	; 0x01
 18e:	5a 81       	ldd	r21, Y+2	; 0x02

00000190 <.Loc.18>:
 190:	88 ea       	ldi	r24, 0xA8	; 168
 192:	90 e0       	ldi	r25, 0x00	; 0

00000194 <.Loc.19>:
 194:	64 9f       	mul	r22, r20
 196:	90 01       	movw	r18, r0
 198:	65 9f       	mul	r22, r21
 19a:	30 0d       	add	r19, r0
 19c:	74 9f       	mul	r23, r20
 19e:	30 0d       	add	r19, r0
 1a0:	11 24       	eor	r1, r1

000001a2 <.Loc.20>:
 1a2:	fc 01       	movw	r30, r24
 1a4:	31 83       	std	Z+1, r19	; 0x01
 1a6:	20 83       	st	Z, r18

000001a8 <.L4>:

        }
}
 1a8:	00 00       	nop
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <h_bridgeR>:

void h_bridgeR(int PercentKracht)
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	0f 92       	push	r0
 1ba:	0f 92       	push	r0
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	9a 83       	std	Y+2, r25	; 0x02
 1c2:	89 83       	std	Y+1, r24	; 0x01

000001c4 <.Loc.23>:
	if ((PercentKracht >= 0) && (PercentKracht <= 100))
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	9a 81       	ldd	r25, Y+2	; 0x02
 1c8:	99 23       	and	r25, r25
 1ca:	2c f1       	brlt	.+74     	; 0x216 <.L7>

000001cc <.Loc.24>:
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	9a 81       	ldd	r25, Y+2	; 0x02
 1d0:	84 36       	cpi	r24, 0x64	; 100
 1d2:	91 05       	cpc	r25, r1
 1d4:	09 f0       	breq	.+2      	; 0x1d8 <.Loc.25>

000001d6 <L0^A>:
 1d6:	fc f4       	brge	.+62     	; 0x216 <.L7>

000001d8 <.Loc.25>:
        {
            OCR4B = ((ICR4/100)*(PercentKracht));
 1d8:	86 ea       	ldi	r24, 0xA6	; 166
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	fc 01       	movw	r30, r24
 1de:	80 81       	ld	r24, Z
 1e0:	91 81       	ldd	r25, Z+1	; 0x01

000001e2 <.Loc.26>:
 1e2:	96 95       	lsr	r25
 1e4:	87 95       	ror	r24
 1e6:	96 95       	lsr	r25
 1e8:	87 95       	ror	r24
 1ea:	9c 01       	movw	r18, r24
 1ec:	ab e7       	ldi	r26, 0x7B	; 123
 1ee:	b4 e1       	ldi	r27, 0x14	; 20
 1f0:	0e 94 ba 01 	call	0x374	; 0x374 <__umulhisi3>
 1f4:	bc 01       	movw	r22, r24
 1f6:	76 95       	lsr	r23
 1f8:	67 95       	ror	r22

000001fa <.Loc.27>:
 1fa:	49 81       	ldd	r20, Y+1	; 0x01
 1fc:	5a 81       	ldd	r21, Y+2	; 0x02

000001fe <.Loc.28>:
 1fe:	8a ea       	ldi	r24, 0xAA	; 170
 200:	90 e0       	ldi	r25, 0x00	; 0

00000202 <.Loc.29>:
 202:	64 9f       	mul	r22, r20
 204:	90 01       	movw	r18, r0
 206:	65 9f       	mul	r22, r21
 208:	30 0d       	add	r19, r0
 20a:	74 9f       	mul	r23, r20
 20c:	30 0d       	add	r19, r0
 20e:	11 24       	eor	r1, r1

00000210 <.Loc.30>:
 210:	fc 01       	movw	r30, r24
 212:	31 83       	std	Z+1, r19	; 0x01
 214:	20 83       	st	Z, r18

00000216 <.L7>:
        }
}
 216:	00 00       	nop
 218:	0f 90       	pop	r0
 21a:	0f 90       	pop	r0
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <main>:

int main(void)
{
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62

0000022a <.Loc.33>:
    init_h_brug();
 22a:	0e 94 80 00 	call	0x100	; 0x100 <init_h_brug>

0000022e <.Loc.34>:
    DDRF &= ~(1<<PF7);
 22e:	80 e3       	ldi	r24, 0x30	; 48
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	fc 01       	movw	r30, r24
 234:	20 81       	ld	r18, Z

00000236 <.Loc.35>:
 236:	80 e3       	ldi	r24, 0x30	; 48
 238:	90 e0       	ldi	r25, 0x00	; 0

0000023a <.Loc.36>:
 23a:	2f 77       	andi	r18, 0x7F	; 127
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18

00000240 <.Loc.37>:
    //pinout h-brug
    DDRH |= (1 << motorL_PWM);
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	fc 01       	movw	r30, r24
 246:	20 81       	ld	r18, Z
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	91 e0       	ldi	r25, 0x01	; 1

0000024c <.Loc.38>:
 24c:	28 60       	ori	r18, 0x08	; 8
 24e:	fc 01       	movw	r30, r24
 250:	20 83       	st	Z, r18

00000252 <.Loc.39>:
    DDRE |= (1 << motorL_1);
 252:	8d e2       	ldi	r24, 0x2D	; 45
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	fc 01       	movw	r30, r24
 258:	20 81       	ld	r18, Z
 25a:	8d e2       	ldi	r24, 0x2D	; 45
 25c:	90 e0       	ldi	r25, 0x00	; 0

0000025e <.Loc.40>:
 25e:	20 61       	ori	r18, 0x10	; 16
 260:	fc 01       	movw	r30, r24
 262:	20 83       	st	Z, r18

00000264 <.Loc.41>:
    DDRE |= (1 << motorL_2);
 264:	8d e2       	ldi	r24, 0x2D	; 45
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	fc 01       	movw	r30, r24
 26a:	20 81       	ld	r18, Z
 26c:	8d e2       	ldi	r24, 0x2D	; 45
 26e:	90 e0       	ldi	r25, 0x00	; 0

00000270 <.Loc.42>:
 270:	20 62       	ori	r18, 0x20	; 32
 272:	fc 01       	movw	r30, r24
 274:	20 83       	st	Z, r18

00000276 <.Loc.43>:
    DDRE |= (1 << motorR_1);
 276:	8d e2       	ldi	r24, 0x2D	; 45
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	fc 01       	movw	r30, r24
 27c:	20 81       	ld	r18, Z
 27e:	8d e2       	ldi	r24, 0x2D	; 45
 280:	90 e0       	ldi	r25, 0x00	; 0

00000282 <.Loc.44>:
 282:	22 60       	ori	r18, 0x02	; 2
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18

00000288 <.Loc.45>:
    DDRG |= (1 << motorR_2);
 288:	83 e3       	ldi	r24, 0x33	; 51
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	fc 01       	movw	r30, r24
 28e:	20 81       	ld	r18, Z
 290:	83 e3       	ldi	r24, 0x33	; 51
 292:	90 e0       	ldi	r25, 0x00	; 0

00000294 <.Loc.46>:
 294:	20 62       	ori	r18, 0x20	; 32
 296:	fc 01       	movw	r30, r24
 298:	20 83       	st	Z, r18

0000029a <.Loc.47>:
    DDRH |= (1 << motorR_PWM);
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	fc 01       	movw	r30, r24
 2a0:	20 81       	ld	r18, Z
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	91 e0       	ldi	r25, 0x01	; 1

000002a6 <.Loc.48>:
 2a6:	20 61       	ori	r18, 0x10	; 16
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18

000002ac <.Loc.49>:

    //H-brug pinnen LOW
    PORTH &= ~(1 << motorL_PWM);
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	fc 01       	movw	r30, r24
 2b2:	20 81       	ld	r18, Z

000002b4 <.Loc.50>:
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	91 e0       	ldi	r25, 0x01	; 1

000002b8 <.Loc.51>:
 2b8:	27 7f       	andi	r18, 0xF7	; 247
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18

000002be <.Loc.52>:
	PORTE &= ~(1 << motorL_1);
 2be:	8e e2       	ldi	r24, 0x2E	; 46
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 81       	ld	r18, Z

000002c6 <.Loc.53>:
 2c6:	8e e2       	ldi	r24, 0x2E	; 46
 2c8:	90 e0       	ldi	r25, 0x00	; 0

000002ca <.Loc.54>:
 2ca:	2f 7e       	andi	r18, 0xEF	; 239
 2cc:	fc 01       	movw	r30, r24
 2ce:	20 83       	st	Z, r18

000002d0 <.Loc.55>:
	PORTE &= ~(1 << motorL_2);
 2d0:	8e e2       	ldi	r24, 0x2E	; 46
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	fc 01       	movw	r30, r24
 2d6:	20 81       	ld	r18, Z

000002d8 <.Loc.56>:
 2d8:	8e e2       	ldi	r24, 0x2E	; 46
 2da:	90 e0       	ldi	r25, 0x00	; 0

000002dc <.Loc.57>:
 2dc:	2f 7d       	andi	r18, 0xDF	; 223
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18

000002e2 <.Loc.58>:
	PORTE &= ~(1 << motorR_1);
 2e2:	8e e2       	ldi	r24, 0x2E	; 46
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 81       	ld	r18, Z

000002ea <.Loc.59>:
 2ea:	8e e2       	ldi	r24, 0x2E	; 46
 2ec:	90 e0       	ldi	r25, 0x00	; 0

000002ee <.Loc.60>:
 2ee:	2d 7f       	andi	r18, 0xFD	; 253
 2f0:	fc 01       	movw	r30, r24
 2f2:	20 83       	st	Z, r18

000002f4 <.Loc.61>:
	PORTG &= ~(1 << motorR_2);
 2f4:	84 e3       	ldi	r24, 0x34	; 52
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	fc 01       	movw	r30, r24
 2fa:	20 81       	ld	r18, Z

000002fc <.Loc.62>:
 2fc:	84 e3       	ldi	r24, 0x34	; 52
 2fe:	90 e0       	ldi	r25, 0x00	; 0

00000300 <.Loc.63>:
 300:	2f 7d       	andi	r18, 0xDF	; 223
 302:	fc 01       	movw	r30, r24
 304:	20 83       	st	Z, r18

00000306 <.Loc.64>:
	PORTH &= ~(1 << motorR_PWM);
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	fc 01       	movw	r30, r24
 30c:	20 81       	ld	r18, Z

0000030e <.Loc.65>:
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	91 e0       	ldi	r25, 0x01	; 1

00000312 <.Loc.66>:
 312:	2f 7e       	andi	r18, 0xEF	; 239
 314:	fc 01       	movw	r30, r24
 316:	20 83       	st	Z, r18

00000318 <.L9>:

    while(1)
    {

        h_bridgeL(0);
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 a3 00 	call	0x146	; 0x146 <h_bridgeL>

00000320 <.Loc.68>:
        h_bridgeR(100);
 320:	84 e6       	ldi	r24, 0x64	; 100
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 da 00 	call	0x1b4	; 0x1b4 <h_bridgeR>

00000328 <.Loc.69>:
        PORTE |= (1 << motorL_1);
 328:	8e e2       	ldi	r24, 0x2E	; 46
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	fc 01       	movw	r30, r24
 32e:	20 81       	ld	r18, Z
 330:	8e e2       	ldi	r24, 0x2E	; 46
 332:	90 e0       	ldi	r25, 0x00	; 0

00000334 <.Loc.70>:
 334:	20 61       	ori	r18, 0x10	; 16
 336:	fc 01       	movw	r30, r24
 338:	20 83       	st	Z, r18

0000033a <.Loc.71>:
        PORTE &= ~(1 << motorL_2);
 33a:	8e e2       	ldi	r24, 0x2E	; 46
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	fc 01       	movw	r30, r24
 340:	20 81       	ld	r18, Z

00000342 <.Loc.72>:
 342:	8e e2       	ldi	r24, 0x2E	; 46
 344:	90 e0       	ldi	r25, 0x00	; 0

00000346 <.Loc.73>:
 346:	2f 7d       	andi	r18, 0xDF	; 223
 348:	fc 01       	movw	r30, r24
 34a:	20 83       	st	Z, r18

0000034c <.Loc.74>:
        PORTE &= ~(1 << motorR_1);
 34c:	8e e2       	ldi	r24, 0x2E	; 46
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	fc 01       	movw	r30, r24
 352:	20 81       	ld	r18, Z

00000354 <.Loc.75>:
 354:	8e e2       	ldi	r24, 0x2E	; 46
 356:	90 e0       	ldi	r25, 0x00	; 0

00000358 <.Loc.76>:
 358:	2d 7f       	andi	r18, 0xFD	; 253
 35a:	fc 01       	movw	r30, r24
 35c:	20 83       	st	Z, r18

0000035e <.Loc.77>:
        PORTG |= (1 << motorR_2);
 35e:	84 e3       	ldi	r24, 0x34	; 52
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	fc 01       	movw	r30, r24
 364:	20 81       	ld	r18, Z
 366:	84 e3       	ldi	r24, 0x34	; 52
 368:	90 e0       	ldi	r25, 0x00	; 0

0000036a <.Loc.78>:
 36a:	20 62       	ori	r18, 0x20	; 32
 36c:	fc 01       	movw	r30, r24
 36e:	20 83       	st	Z, r18

00000370 <.Loc.79>:
        h_bridgeL(0);
 370:	00 00       	nop
 372:	d2 cf       	rjmp	.-92     	; 0x318 <.L9>

00000374 <__umulhisi3>:
 374:	a2 9f       	mul	r26, r18

00000376 <.Loc.1>:
 376:	b0 01       	movw	r22, r0

00000378 <.Loc.2>:
 378:	b3 9f       	mul	r27, r19

0000037a <.Loc.3>:
 37a:	c0 01       	movw	r24, r0

0000037c <.Loc.4>:
 37c:	a3 9f       	mul	r26, r19

0000037e <.Loc.5>:
 37e:	70 0d       	add	r23, r0

00000380 <.Loc.6>:
 380:	81 1d       	adc	r24, r1

00000382 <.Loc.7>:
 382:	11 24       	eor	r1, r1

00000384 <.Loc.8>:
 384:	91 1d       	adc	r25, r1

00000386 <.Loc.9>:
 386:	b2 9f       	mul	r27, r18

00000388 <.Loc.10>:
 388:	70 0d       	add	r23, r0

0000038a <.Loc.11>:
 38a:	81 1d       	adc	r24, r1

0000038c <.Loc.12>:
 38c:	11 24       	eor	r1, r1

0000038e <.Loc.13>:
 38e:	91 1d       	adc	r25, r1

00000390 <.Loc.14>:
 390:	08 95       	ret

00000392 <_exit>:
 392:	f8 94       	cli

00000394 <__stop_program>:
 394:	ff cf       	rjmp	.-2      	; 0x394 <__stop_program>
